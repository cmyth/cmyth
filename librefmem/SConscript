#
# librefmem
#

import sys

Import('env')

prefix = env['PREFIX']

name = 'refmem'
major = 0
minor = 1
branch = 3
fork = 0

version = [ major, minor, branch, fork ]

libver = env.GenVersion('version.h',
                        VERSION = version)

src = [ 'alloc.c', 'debug.c', 'version.c' ]

linkflags = env.soname(name, major, minor, branch, fork)

static = env.StaticLibrary(name, src,
                           LINKFLAGS = env['LDFLAGS'],
                           LIBS = [],
                           CPPPATH = [ '../include', '.' ])
shared = env.CMSharedLibrary(name, src,
                             VERSION = version,
                             LINKFLAGS = linkflags + ' ' + env['LDFLAGS'],
                             LIBS = [],
                             CPPPATH = [ '../include', '.' ])

targets = [ static ]

env.Install(prefix + '/lib', static)

if env.build_shared():
    targets += [ shared ]
    env.InstallShared(prefix + '/lib', shared,
                      VERSION = version,
                      NAME = name)

env.Depends(src, libver)

if env.GetOption('clean'):
    env.Clean(targets, [ 'version.h' ])

Return('targets')
